openapi: 3.0.0
info:
  version: 1.0.0
  title: Game Client API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Bot Tom Frag
    email: bottomfrag@osrsmillionaires.tk
  x-logo:
    url: 'https://redocly.github.io/redoc/petstore-logo.png'
    altText: Petstore logo
  license:
    name: Proprietary
    url: 'https://google.com'
tags:
  - name: client
    description: Anything to do with the Game Client itself
  - name: tabs
    description: Access the tabs that are open on this client
  - name: assigned script
    description: Access the script assigned to a particular tab
  - name: scripts
    description: Access the scripts available to all accounts on this client   
x-tagGroups:
  - name: API Endpoints
    tags:
      - general
      - client
      - tabs
      - assigned script
      - scripts
paths:
  /docs:
    get:
      operationId: getDocs
      summary: Gets the API Documentation
      description: Get the human-readable API docs for this API
      tags:
        - general
      responses:
        '200':
          description: HTML API Document
          content:
            text/html:
              schema:
                type: string
                example: <html><head></head><body>Documentation</body></html>
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # EXAMPLE
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - name
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                    tag:
                      type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
  # END EXAMPLE

  /healthz:
    get:
      operationId: checkHealth
      summary: Check the health of this client
      description: Returns information about the health of this client, or an error if unhealthy.
      tags:
        - general
      parameters:
        - name: lod
          in: query
          description: Level of detail (lod) of status report (integer from 0 to MAX_LOD). Omit to provide MAX_LOD report.
          schema:
            type: integer
            minimum: 0
            default: 1
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '503':
          description: Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
  /readyz:
    get:
      operationId: checkReady
      summary: Check the readiness of this client
      description: Returns information about the readiness state of this client, or an error if not ready.
      tags:
        - general
      parameters:
        - name: lod
          in: query
          description: Level of detail (lod) of status report (integer from 0 to MAX_LOD). Omit to provide MAX_LOD report.
          schema:
            type: integer
            minimum: 0
            default: 1
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadyCheck"
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '503':
          description: Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadyCheck"
  
  /client/start:
    post:
      operationId: clientStart
      summary: Start the Game Client with a set of input parameters
      description: Starts the Game Client with a set of input parameters
      tags:
        - client
      requestBody:
        $ref: '#/components/requestBodies/StartParams'
      responses:
        '200':
          description: Operation Successful
        '304':
          description: Client Already Running
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Operation Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /client/exit:
    post:
      operationId: clientExit
      summary: Close the Game Client
      description: Close the Game Client
      parameters:
        - name: force
          in: query
          description: Bypass any shutdown procedures and immediately exit the client (not recommended)
          schema:
            type: boolean
      tags:
        - client
      responses:
        '200':
          description: Operation Successful
        '304':
          description: Client Not Found
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Operation Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /client/status:
    get:
      operationId: getClientStatus
      summary: Get the client's current status
      description: Get the client's current status
      tags:
        - client
      parameters:
        - name: lod
          in: query
          description: Level of detail (lod) of status report (integer from 0 to MAX_LOD). Omit to provide MAX_LOD report.
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tabs:
    get:
      operationId: getTabs
      summary: Get general information about tabs and their accounts 
      description: Get information about the tabs that are currently open, and their assigned account (including running script if applicable)
      tags:
        - tabs
      responses:
        '200':
          description: Request Successful
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createTab
      summary: Create a new tab on the client
      description: Create a new tab in the client and assign an account to it
      tags:
        - tabs
      requestBody:
        $ref: '#/components/requestBodies/CreateTabParams'
      responses:
        '200':
          description: Request Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tabs/{tabID}:
    parameters:
        - $ref: '#/components/parameters/TabID'
    get:
      operationId: getTab
      summary: Get status information about the specified tab
      description: Gets information about the specified tab including assigned account and running script if available
      tags:
        - tabs
      responses:
        '200':
          description: Request Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteTab
      summary: Remove a tab from the client
      description: Removes the current tab and its assigned account and script if applicable.
      tags:
        - tabs
      responses:
        '200':
          description: Operation Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Operation Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tabs/{tabID}/script:
    parameters:
        - $ref: '#/components/parameters/TabID'
    get:
      operationId: getAssignedScript
      summary: Gets script information of the specified tab
      description: Gets information on the current script assigned to the account on this tab
      tags:
        - assigned script
      responses:
        '200':
          description: Request Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: assignScript
      summary: Assign or change the script of the specified tab
      description: Assign or change the script of the specified tab
      tags:
        - assigned script
      requestBody:
        $ref: '#/components/requestBodies/AssignScriptParams'
      responses:
        '200':
          description: Request Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: unassignScript
      summary: Unassign and stop the script assigned to the specified tab
      description: Stops a running script and unassigns it from the tab
      tags:
        - assigned script
      responses:
        '200':
          description: Operation Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tabs/{tabID}/script/pause:
    parameters:
        - $ref: '#/components/parameters/TabID'
    post:
      operationId: pauseAssignedScript
      summary: Pause an assigned script
      description: Pause a script assigned to the specified tab. If already paused, no change occurs.
      tags:
        - assigned script
      responses:
        '200':
          description: Operation Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tabs/{tabID}/script/resume:
    parameters:
        - $ref: '#/components/parameters/TabID'
    post:
      operationId: resumeAssignedScript
      summary: Resume an assigned script
      description: Resume a script assigned to the specified tab. If already running, no change occurs.
      tags:
        - assigned script
      responses:
        '200':
          description: Operation Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /scripts:
    get:
      operationId: getScripts
      summary: Get all scripts available to this client
      description: Gets all the stored scripts available to any account on this client.
      tags:
        - scripts
      responses:
        '200':
          description: Request Successful
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /scripts/{scriptName}:
    parameters:
        - name: scriptName
          in: path
          description: Name of the available script to query
          required: true
          schema:
            type: string
    get:
      operationId: getScript
      summary: Get the metadata of an available script
      description: Gets the metadata of the specified available script
      tags:
        - scripts
      responses:
        '200':
          description: Request Successful
        '400': 
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404': 
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: updateScript
      summary: Update an existing or transfer a new script
      description: Update an existing or transfer a new script such that it is available for all accounts on the client.
      tags:
        - scripts
      requestBody:
        $ref: '#/components/requestBodies/TransferScriptParams'
      responses:
        '200':
          description: Operation Successful
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Request Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  parameters:
    TabID:
      name: tabID
      in: path
      description: Identifier number of the tab in question. (number from 1..n where n is the number of tabs open on client)
      required: true
      schema:
        type: integer
        minimum: 1

  schemas:
    StartParams:
      type: object
      required:
        - username
        - password
      allOf: #properties concat
        - type: object
          properties:
            username:
              type: string
              description: Dreambot Forums username
              example: test123@gmail.com
            password:
              type: string
              description: Dreambot Forums Password (cleartext)
              example: password123
        - $ref: '#/components/schemas/AccountDeployProperties'
        - type: object
          properties:
            fps:
              type: integer
              description: Maximum FPS the client will run at
              example: 30
            proxyHostArg:
              type: string
              format: hostname
              description: Host IP of a proxy for all tabs on this client to use
              example: 123.234.345.456
            proxyPortArg:
              type: integer
              description: Host port of a proxy for all tabs on this client to use
              example: 8080
            proxyUserArg:
              type: string
              description: Username to login to proxy
              example: email@proxyprovider.com
            proxyPassArg:
              type: string
              description: Password to login to proxy
              example: password123
            slim:
              type: boolean
              description: Shrinks the client's UI a bit
            single:
              type: boolean
              description:  Removes the tab bar, disabling the ability to open or close tabs
    CreateTabParams:
      type: object
      allOf: #properties concat
        - $ref: '#/components/schemas/AccountDeployProperties'
    ScriptMetadata:
      type: object
      required:
        - script
      properties:
        script:
          type: string
          description: The name of the script (must be accurate)
          example: WoodcuttingScript
        scriptExecutable:
          $ref: '#/components/schemas/URL'
    AccountDeployProperties:
      type: object
      required:
        # - accountUsernames
        # - accountPasswords
        - world
        - script
      properties:
        accountUsernames:
          type: array
          minItems: 1
          items:
            type: string
          description: OSRS account usernames to be deployed on the client
          example: [ account1@gmail.com, account2@gmail.com ]
        accountPasswords:
          type: array
          minItems: 1
          items:
            type: string
          description: Matching passwords for the accounts to be deployed on the client
          example: [ password1, password2 ]
        world:
          $ref: '#/components/schemas/World'
        script:
          type: array
          items:
            type: string
          description: List of scripts to run. The number of scripts should match the number of accounts, and each script will be mapped to its respective account in parameter order.
          example: [ scriptName1, scriptName2 ]
        params:
          type: array
          description: Any parameters that the script supports, in whatever string format the script specifies. The number of inner sets of strings in the array should match the number of scripts specified (each array applies to one account), and each parameter array will be mapped to its respective script in parameter order.
          example: [ ["parameter1:value1", "parameter2:value2"], ["droplogs:true", "upgradeaxe:true", "antiban:false"] ]
          items:
            type: array
            items:
              type: string
              description: "string parameter, recommended to be in format parameter1: value1"
          
    World: # add world range validation
      type: integer
      example: 318
    URL:
      type: string
      format: url
      example: https://example.com
    Error:
      type: object
      required:
        - code
        - error
        - message
        - path
      properties:
        code:
          type: integer
          format: int32
          description: Error code assigned based on the type of failure (different from status)
          example: 23
        error:
          type: string
          description: Detailed message about the error
          example: "Invalid response for status code 200: should have required property 'name'"
        message:
          type: string
          description: General message about the error
          example: The response was not valid.
        path:
          type: string
          description: What caused the error
          example: "accountUsername"
    HealthCheck:
      type: object
      properties:
        api_version:
          anyOf:
          - type: string
          - $ref: '#/components/schemas/Error'
        java_version:
          anyOf:
          - type: string
          - $ref: '#/components/schemas/Error'
        client_lastmodified:
          anyOf:
          - type: string
          - $ref: '#/components/schemas/Error'
    ReadyCheck:
      type: object
      properties:
        up_to_date:
          anyOf:
          - type: boolean
          - $ref: '#/components/schemas/Error'
        scripts_installed:
          anyOf:
          - type: boolean
          - $ref: '#/components/schemas/Error'
        clientresources_installed:
          anyOf:
          - type: boolean
          - $ref: '#/components/schemas/Error'
        apiserver_running:
          anyOf:
          - type: boolean
          - $ref: '#/components/schemas/Error'
    Status:
      type: object
      required:
        - version
        - running
      properties:
        version: 
          type: string
          description: version of this client
          example: v1
        running:
          type: boolean
          description: whether the gameclient is running or not
          example: true
  requestBodies:
    StartParams:
      description: Request body with parameters available when starting up the client.
      required: true
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/StartParams'
    CreateTabParams:
      description: Request body with parameters available when  opening a new tab on the client.
      required: true
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/CreateTabParams'
    AssignScriptParams:
      description: Request body with optional and required parameters necessary for assigning a script to something.
      required: true
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/ScriptMetadata'
    TransferScriptParams:
      description: Request body with parameters necessary for transferring a script.
      required: true
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/ScriptMetadata'
              # - $ref: '#/components/schemas/ScriptMetadataObject'
  
  securitySchemes:
    petstore_auth:
      description: |
        Get access to data while protecting your account credentials.
        OAuth2 is also a safer and more secure way to give you access.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      description: >
        For this sample, you can use the api key `special-key` to test the
        authorization filters.
      type: apiKey
      name: api_key
      in: header
  examples:
    Order:
      value:
        quantity: 1,
        shipDate: 2018-10-19T16:46:45Z,
        status: placed,
        complete: false

