//@ts-check
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const { Proxy } = require('./Proxy');

const { ExistingID, GameclientID } = require('./_shared/schemas');

const UUIDSchema = {
  type: String,
  validate: {
    validator: value => /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.exec(value),
    message: '{VALUE} must be in UUIDv4 format. i.e. fbbb576c-fbcb-49f4-b2a7-dfb02283b900'
  },
}

const MACAddressSchema = {
  type: String,
  validate: {
    validator: value => /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/.exec(value),
    message: '{VALUE} must be in MAC Address format. i.e. 3D:F2:C9:A6:B3:4F'
  }
}

const SystemProfileSchema = {
  proxyID: { ...ExistingID(Proxy), required:true },
  os: { type:String, enum:['ubuntu:19.10'], default:'ubuntu:19.10' },
  UUID: UUIDSchema,
  MACAddress: MACAddressSchema
}

const AutogeneratedGameclientID = {...GameclientID, default: async function(){
  let lastClient = (await Gameclient.findOne({}, {}, { sort: { 'created' : -1 } }));
  // @ts-ignore
  return  lastClient ? lastClient.gameclientID : 30000
}};

const GameclientSchema = new Schema(
  {
    gameclientID: GameclientID,
    systemProfile: SystemProfileSchema,
    created: { type: Date, default:Date}
  }
);

GameclientSchema.index({gameclientID: 1}, {unique: true});

// @ts-ignore
GameclientSchema.pre('save', async function() { //autogenerate IDs
  // @ts-ignore
  if (this.gameclientID == null) {
    let lastClient = (await Gameclient.findOne({}, {}, { sort: { 'gameclientID' : -1 } }));
    //console.log(lastClient);
    // @ts-ignore
    //console.log('PREViOUS ID:', lastClient.gameclientID, 'NEWID:', lastClient.gameclientID+1);
    // @ts-ignore
    this.gameclientID = lastClient ? lastClient.gameclientID+1 : 30000
  }
});

const Gameclient = mongoose.model('Gameclient', GameclientSchema); //any time Account is created, it will be in the 'account' colllection and based on AccountSchema

module.exports = { Gameclient };